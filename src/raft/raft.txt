package raft_v1

//
// this is an outline of the API that raft must expose to
// the service (or tester). see comments below for
// each of these functions for more details.
//
// rf = Make(...)
//   create a new Raft server.
// rf.Start(command interface{}) (index, term, isleader)
//   start agreement on a new log entry
// rf.GetState() (term, isLeader)
//   ask a Raft for its current term, and whether it thinks it is leader
// ApplyMsg
//   each time a new entry is committed to the log, each Raft peer
//   should send an ApplyMsg to the service (or tester)
//   in the same server.
//

import (
	"6.824/labgob"
	"bytes"
	"fmt"
	//	"bytes"
	"sync"
	"sync/atomic"
	"time"

	//	"6.824/labgob"
	"6.824/labrpc"
)

//
// as each Raft peer becomes aware that successive log entries are
// committed, the peer should send an ApplyMsg to the service (or
// tester) on the same server, via the applyCh passed to Make(). set
// CommandValid to true to indicate that the ApplyMsg contains a newly
// committed log entry.
//
// in part 2D you'll want to send other kinds of messages (e.g.,
// snapshots) on the applyCh, but set CommandValid to false for these
// other uses.
//

//节点角色
type Role int

//投票状态
type VoteState int

//追加日志状态
type AppendEntriesState int

const ( //枚举节点角色
	Follower Role = iota
	Candidate
	Leader
)

const (

	// MoreVoteTime MinVoteTime 定义随机生成投票过期时间范围:(MoreVoteTime+MinVoteTime~MinVoteTime)
	MoreVoteTime = 100
	MinVoteTime  = 75

	// HeartbeatSleep 心脏休眠时间,要注意的是，这个时间要比选举低，才能建立稳定心跳机制
	HeartbeatSleep = 35
	AppliedSleep   = 15
)

const ( //枚举节点选举状态
	Normal VoteState = iota
	Killed
	Expire
	Voted
)

const (
	AppNormal AppendEntriesState = iota
	AppOutOfDate
	AppKilled
	AppRepeat
	AppCommited
	Mismatch
)

type LogEntry struct {
	Term    int
	Command interface{}
}

type ApplyMsg struct {
	CommandValid bool
	Command      interface{}
	CommandIndex int

	// For 2D:
	SnapshotValid bool
	Snapshot      []byte
	SnapshotTerm  int
	SnapshotIndex int
}

//
// A Go object implementing a single Raft peer.
//
type Raft struct {
	mu        sync.Mutex          // Lock to protect shared access to this peer's state
	peers     []*labrpc.ClientEnd // RPC end points of all peers
	persister *Persister          // Object to hold this peer's persisted state
	me        int                 // this peer's index into peers[]
	dead      int32               // set by Kill()

	// Your data here (2A, 2B, 2C).
	// Look at the paper's Figure 2 for a description of what
	// state a Raft server must maintain.

	//所有类型server拥有的变量
	currentTerm int        //当前任期
	votedFor    int        //记录当前节点的投票对象
	logs        []LogEntry //日志条目数组

	//所有server经常修改的
	commitIndex int //状态机中已经被提交的日志条目的索引值
	lastApplied int //最后一个被添加到状态机的索引值

	//leader拥有的变量
	nextIndex  []int //需要发送给follower下一个日志条目的索引值
	matchIndex []int //已经复制给follower的最后日志条目的下标

	role              Role //节点的角色
	reElectionTimeout time.Duration
	timer             *time.Ticker //每个节点的计时器

	applyChan chan ApplyMsg
}

type AppendEntriesArgs struct {
	Term         int        //任期
	LeadId       int        //leader的ID
	PrevLogIndex int        //预计从哪里追加的index
	PrevLogTerm  int        //追加日志的任期号
	Entries      []LogEntry //预计存储的日志
	LeaderCommit int        //最后一个被大多数机器都复制的日志的index

}

type AppendEntriesReply struct { //follower给leader的返回结构
	Term        int
	Success     bool
	AppState    AppendEntriesState
	UpNextIndex int //更新Leader的nextIndex[i]
}

// return currentTerm and whether this server
// believes it is the leader.
func (rf *Raft) GetState() (int, bool) {
	rf.mu.Lock()
	defer rf.mu.Unlock()
	var term int
	var isleader bool
	// Your code here (2A).
	term = rf.currentTerm
	if rf.role == Leader {
		isleader = true
	} else {
		isleader = false
	}
	return term, isleader
}

//
// save Raft's persistent state to stable storage,
// where it can later be retrieved after a crash and restart.
// see paper's Figure 2 for a description of what should be persistent.
//

func (rf *Raft) persist() {
	// Your code here (2C).
	// Example:
	w := new(bytes.Buffer)
	e := labgob.NewEncoder(w)
	e.Encode(rf.currentTerm)
	e.Encode(rf.votedFor)
	e.Encode(rf.logs)
	data := w.Bytes()
	rf.persister.SaveRaftState(data)
}

//
// restore previously persisted state.
//
func (rf *Raft) readPersist(data []byte) {
	if data == nil || len(data) < 1 { // bootstrap without any state?
		return
	}
	// Your code here (2C).
	// Example:
	r := bytes.NewBuffer(data)
	d := labgob.NewDecoder(r)
	var currentTerm int
	var voteFor int
	var logs []LogEntry

	if d.Decode(&currentTerm) != nil || d.Decode(&voteFor) != nil || d.Decode(&logs) != nil {
		fmt.Println("解码错误！")
	} else {
		rf.currentTerm = currentTerm
		rf.votedFor = voteFor
		rf.logs = logs
	}

}

//
// A service wants to switch to snapshot.  Only do so if Raft hasn't
// have more recent info since it communicate the snapshot on applyCh.
//
func (rf *Raft) CondInstallSnapshot(lastIncludedTerm int, lastIncludedIndex int, snapshot []byte) bool {

	// Your code here (2D).

	return true
}

// the service says it has created a snapshot that has
// all info up to and including index. this means the
// service no longer needs the log through (and including)
// that index. Raft should now trim its log as much as possible.
func (rf *Raft) Snapshot(index int, snapshot []byte) {
	// Your code here (2D).

}

//
// example RequestVote RPC arguments structure.
// field names must start with capital letters!
//
type RequestVoteArgs struct {
	Term         int //候选人的任期
	CandidateId  int //候选人id
	LastLogIndex int //候选人日志最后索引
	LastLogTerm  int //候选人最后索引的任期号
}

//
// example RequestVote RPC reply structure.
// field names must start with capital letters!
//
type RequestVoteReply struct {
	// Your data here (2A).
	Term        int  //投票方的任期
	VoteGranted bool //是否投给该竞选者
	VoteState   VoteState
}

//
// example RequestVote RPC handler.
//
func (rf *Raft) RequestVote(args *RequestVoteArgs, reply *RequestVoteReply) {
	// Your code here (2A, 2B).
	rf.mu.Lock()
	defer rf.mu.Unlock()
	if rf.killed() {
		reply.VoteState = Killed
		reply.Term = -1
		reply.VoteGranted = false
		return
	}

	//出现分区，该竞选者已经过时
	if args.Term < rf.currentTerm {
		//fmt.Printf("在任期 [%v] 的Raft要求在任期 [%v] 的Raft投票，但是这个请求是过期的。不予投票\n", args.Term, rf.currentTerm)
		reply.VoteState = Expire
		reply.Term = rf.currentTerm
		reply.VoteGranted = false
		return
	}

	if args.Term > rf.currentTerm {
		//重置状态
		rf.role = Follower
		rf.currentTerm = args.Term
		rf.votedFor = -1
		rf.persist()
		rf.persist()
	}

	if rf.votedFor == -1 {
		currentLogIndex := len(rf.logs) - 1
		currentLogTerm := 0
		//如果currentLogIndex的下标不是-1，将Term值赋值过来
		if currentLogIndex >= 0 {
			currentLogTerm = rf.logs[currentLogIndex].Term
		}

		//要求投票的leader的日志应该是最新的
		if args.LastLogTerm < currentLogTerm || ((len(rf.logs) > 0) && args.LastLogTerm == currentLogTerm && args.LastLogIndex < currentLogIndex) {
			//fmt.Printf("在任期 [%v] 的Raft要求在任期 [%v] 的Raft投票，但是这个日志不是最新的。不予投票\n", args.Term, rf.currentTerm)
			reply.VoteState = Expire
			reply.VoteGranted = false
			reply.Term = rf.currentTerm
			return
		}

		//投票
		fmt.Printf("Raft [%v]投票成功 -> %v\n", rf.me, args.CandidateId)
		rf.votedFor = args.CandidateId
		rf.persist()

		reply.VoteState = Normal
		reply.VoteGranted = true
		reply.Term = rf.currentTerm

		rf.timer.Reset(rf.reElectionTimeout)
	} else { //任期相同，但是票已经投给别人
		reply.VoteState = Voted
		reply.VoteGranted = false

		if rf.votedFor != args.CandidateId {
			return
		} else { //当前节点的票给同一个人，但由于网络原因又发送了一次请求
			rf.role = Follower
		}
		rf.timer.Reset(rf.reElectionTimeout)
	}
	return
}

//
// example code to send a RequestVote RPC to a server.
// server is the index of the target server in rf.peers[].
// expects RPC arguments in args.
// fills in *reply with RPC reply, so caller should
// pass &reply.
// the types of the args and reply passed to Call() must be
// the same as the types of the arguments declared in the
// handler function (including whether they are pointers).
//
// The labrpc package simulates a lossy network, in which servers
// may be unreachable, and in which requests and replies may be lost.
// Call() sends a request and waits for a reply. If a reply arrives
// within a timeout interval, Call() returns true; otherwise
// Call() returns false. Thus Call() may not return for a while.
// A false return can be caused by a dead server, a live server that
// can't be reached, a lost request, or a lost reply.
//
// Call() is guaranteed to return (perhaps after a delay) *except* if the
// handler function on the server side does not return.  Thus there
// is no need to implement your own timeouts around Call().
//
// look at the comments in ../labrpc/labrpc.go for more details.
//
// if you're having trouble getting RPC to work, check that you've
// capitalized all field names in structs passed over RPC, and
// that the caller passes the address of the reply struct with &, not
// the struct itself.
//
func (rf *Raft) sendRequestVote(server int, args *RequestVoteArgs, reply *RequestVoteReply, voteNums *int) bool {
	if rf.killed() {
		return false
	}
	//fmt.Println("I'm trying to get vote.")
	ok := rf.peers[server].Call("Raft.RequestVote", args, reply)

	for !ok {
		//fmt.Println("I'm trying to get vote.")
		if rf.killed() {
			return false
		}
		ok = rf.peers[server].Call("Raft.RequestVote", args, reply) //不停的进行重传
	}

	//fmt.Printf("Raft %v尝试获得锁", rf.me)
	rf.mu.Lock()
	//fmt.Printf("Raft %v获得锁", rf.me)
	defer rf.mu.Unlock()

	switch reply.VoteState {
	case Expire:
		{
			rf.role = Follower
			rf.timer.Reset(rf.reElectionTimeout)
			if reply.Term > rf.currentTerm {
				rf.currentTerm = reply.Term
				rf.votedFor = -1
				rf.persist()
			}
		}
	case Normal, Voted:
		{
			//收集选票

			if reply.VoteGranted && reply.Term == rf.currentTerm && *voteNums <= (len(rf.peers)/2) {
				*voteNums++
			}
			//fmt.Printf("%v\n", *voteNums)

			if *voteNums > (len(rf.peers) / 2) {
				*voteNums = 0
				if rf.role == Leader {
					return ok
				}
				fmt.Printf("Raft[%v] 成为领导者, 最后一个日志下标：%v, 已提交日志：%v\n", rf.me, len(rf.logs)-1, rf.commitIndex)
				rf.role = Leader
				rf.nextIndex = make([]int, len(rf.peers))
				for i, _ := range rf.nextIndex {
					rf.nextIndex[i] = len(rf.logs)
				}
				rf.timer.Reset(HeartbeatSleep * time.Millisecond)
			}

		}
	case Killed:
		return false

	}
	return ok
}

//
// the service using Raft (e.g. a k/v server) wants to start
// agreement on the next command to be appended to Raft's log. if this
// server isn't the leader, returns false. otherwise start the
// agreement and return immediately. there is no guarantee that this
// command will ever be committed to the Raft log, since the leader
// may fail or lose an election. even if the Raft instance has been killed,
// this function should return gracefully.
//
// the first return value is the index that the command will appear at
// if it's ever committed. the second return value is the current
// term. the third return value is true if this server believes it is
// the leader.
//
func (rf *Raft) sendAppendEntries(server int, args *AppendEntriesArgs, reply *AppendEntriesReply, appendNum *int) {

	if rf.killed() {
		return
	}
	fmt.Printf("Raft[%v] 尝试给Raft[%v]发送追加日志消息！\n", rf.me, server)
	ok := rf.peers[server].Call("Raft.AppendEntries", args, reply)

	for !ok {
		if rf.killed() {
			return
		}
		fmt.Printf("Raft[%v] 尝试给Raft[%v]发送追加日志消息！\n", rf.me, server)
		ok = rf.peers[server].Call("Raft.AppendEntries", args, reply) //不停的进行重传
	}

	rf.mu.Lock()
	defer rf.mu.Unlock()

	switch reply.AppState {
	case AppKilled:
		{
			fmt.Printf("Raft[%v]挂了\n", rf.me)
			return
		}
	//目标节点正常返回
	case AppNormal:
		{
			if reply.Success && reply.Term == rf.currentTerm && *appendNum <= len(rf.peers)/2 {
				*appendNum++
			}

			if rf.nextIndex[server] > len(rf.logs)+1 {
				return
			}

			rf.nextIndex[server] += len(args.Entries)
			if *appendNum > len(rf.peers)/2 {
				*appendNum = 0

				if len(rf.logs) == 0 || rf.logs[len(rf.logs)-1].Term != rf.currentTerm {
					return
				}

				for rf.lastApplied < len(rf.logs) {
					rf.lastApplied++
					fmt.Printf("主节点Raft[%v] 提交日志 %v\n", rf.me, rf.lastApplied-1)
					applyMsg := ApplyMsg{
						CommandValid: true,
						Command:      rf.logs[rf.lastApplied-1].Command,
						CommandIndex: rf.lastApplied,
					}
					rf.applyChan <- applyMsg
					rf.commitIndex = rf.lastApplied
				}

			}
			return
		}

	case AppOutOfDate: //网络出现分区，本Leader节点已经过时
		{
			//节点变为追随者，并重置rf的状态
			fmt.Printf("Raft[%v] 切换为跟随者！\n", rf.me)
			rf.role = Follower
			rf.votedFor = -1
			rf.timer.Reset(rf.reElectionTimeout)
			rf.currentTerm = reply.Term
			rf.persist()
		}
	case Mismatch, AppCommited:
		{
			if reply.Term > rf.currentTerm {
				rf.role = Follower
				rf.votedFor = -1
				rf.timer.Reset(rf.reElectionTimeout)
				rf.currentTerm = reply.Term
				rf.persist()
			}
			rf.nextIndex[server] = reply.UpNextIndex
			return
		}

	}
	return
}

func (rf *Raft) AppendEntries(args *AppendEntriesArgs, reply *AppendEntriesReply) {
	rf.mu.Lock()
	defer rf.mu.Unlock()
	rf.timer.Reset(rf.reElectionTimeout)
	if rf.killed() { //节点挂机
		reply.AppState = AppKilled
		reply.Term = -1
		reply.Success = false
		fmt.Printf("从节点Raft[%v]挂机\n", rf.me)
		return
	}

	//网络出现分区，请求leader的任期比当前raft任期小，说明请求leader已经过期
	if args.Term < rf.currentTerm {
		reply.AppState = AppOutOfDate
		reply.Term = rf.currentTerm
		reply.Success = false
		fmt.Printf("Raft[%v] 对 raft[%v]说：你不是leader了\n", rf.me, args.LeadId)
		return
	}

	// 出现冲突情况
	// 1. preLogIndex大于当前日志的最大下标，说明追随者缺失日志，不予更新
	// 2. preLog中的任期和preLogIndex处的任期不相等说明日志冲

	if args.PrevLogIndex >= 0 && (args.PrevLogIndex > len(rf.logs)-1 || args.PrevLogTerm != rf.logs[args.PrevLogIndex].Term) { //在相同的prevIndex处判断从节点和主节点的任期值
		reply.AppState = Mismatch
		reply.Term = rf.currentTerm
		reply.Success = false
		reply.UpNextIndex = rf.lastApplied
		//fmt.Printf("从节点 Raft[%v, %v] 的下一个日志是：%v\n", rf.me, rf.currentTerm, reply.UpNextIndex)
		return
	}

	//当前节点日志超前
	if args.PrevLogIndex != -1 && rf.lastApplied-1 > args.PrevLogIndex {
		reply.AppState = AppCommited
		reply.Term = rf.currentTerm
		reply.Success = false
		reply.UpNextIndex = rf.lastApplied //快进到已提交部分
		return
	}

	//对当前的ticker进行重置
	//fmt.Printf("重置从节点Raft[%v]\n", rf.me)
	rf.currentTerm = args.Term
	rf.votedFor = args.LeadId
	rf.role = Follower

	//对reply进行赋值
	reply.AppState = AppNormal
	reply.Term = rf.currentTerm
	reply.Success = true

	//如果是日志包，则进行追加
	if args.Entries != nil {
		fmt.Printf("从节点Raft [%v] 追加日志 %v - %v\n", rf.me, args.PrevLogIndex+1, args.PrevLogIndex+len(args.Entries))
		rf.logs = rf.logs[:args.PrevLogIndex+1]
		rf.logs = append(rf.logs, args.Entries...)
		fmt.Printf("从节点日志：")
		for i, v := range rf.logs {
			fmt.Printf("[%v, %v], ", v.Term, i)
			if i%20 == 0 && i != 0 {
				fmt.Println()
			}
		}
		fmt.Println()

	}
	rf.persist()

	//将日志提交至与leader相同
	for rf.lastApplied < args.LeaderCommit {
		rf.lastApplied++
		fmt.Printf("从节点Raft[%v] 提交日志 %v\n", rf.me, rf.lastApplied-1)
		applyMsg := ApplyMsg{
			CommandValid: true,
			CommandIndex: rf.lastApplied,
			Command:      rf.logs[rf.lastApplied-1].Command,
		}
		rf.applyChan <- applyMsg
		rf.commitIndex = rf.lastApplied
	}

	return
}

func (rf *Raft) Start(command interface{}) (int, int, bool) {
	index := -1
	term := -1
	isLeader := true

	// Your code here (2B).
	if rf.killed() {
		return index, term, false
	}

	rf.mu.Lock()
	defer rf.mu.Unlock()

	if rf.role != Leader {
		return index, term, false
	}

	isLeader = true
	//初始化日志条目并进行追加
	appendLog := LogEntry{
		Term:    rf.currentTerm,
		Command: command,
	}
	fmt.Printf("主节点 Raft[%v] 追加日志 %v - %v\n", rf.me, len(rf.logs), len(rf.logs))
	rf.logs = append(rf.logs, appendLog) //主节点追加日志
	fmt.Printf("主节点日志：")
	for i, v := range rf.logs {
		fmt.Printf("[%v, %v], ", v.Term, i)
		if i%20 == 0 && i != 0 {
			fmt.Println()
		}
	}
	fmt.Println()
	rf.persist()

	index = len(rf.logs)
	term = rf.currentTerm
	return index, term, isLeader
}

//
// the tester doesn't halt goroutines created by Raft after each test,
// but it does call the Kill() method. your code can use killed() to
// check whether Kill() has been called. the use of atomic avoids the
// need for a lock.
//
// the issue is that long-running goroutines use memory and may chew
// up CPU time, perhaps causing later tests to fail and generating
// confusing debug output. any goroutine with a long-running loop
// should call killed() to check whether it should stop.
//
func (rf *Raft) Kill() {
	atomic.StoreInt32(&rf.dead, 1)
	// Your code here, if desired.
	rf.mu.Lock()
	rf.timer.Stop()
	rf.mu.Unlock()
}

func (rf *Raft) killed() bool {
	z := atomic.LoadInt32(&rf.dead)
	return z == 1
}

// The ticker go routine starts a new election if this peer hasn't received
// heartsbeats recently.
func (rf *Raft) ticker() {
	for rf.killed() == false {

		// Your code here to check if a leader election should
		// be started and to randomize sleeping time using
		// time.Sleep().

		select { //定时器超时进行选举
		case <-rf.timer.C:
			if rf.killed() {
				return
			}

			rf.mu.Lock()
			switch rf.role {
			case Follower:
				rf.role = Candidate
				fallthrough
			case Candidate:
				fmt.Printf("Raft[%v] 成为候选者。\n", rf.me)
				//初始化自己的任期，并把票投给自己
				rf.currentTerm += 1
				rf.votedFor = rf.me
				votedNums := 1 //票数统计
				rf.persist()

				//重新设置选举超时
				rf.reElectionTimeout = time.Duration(generateOverTime(int64(rf.me))) * time.Millisecond
				rf.timer.Reset(rf.reElectionTimeout)

				//请求其他节点选举

				for i := 0; i < len(rf.peers); i++ {
					if i == rf.me {
						continue
					}

					voteArgs := RequestVoteArgs{
						Term:         rf.currentTerm,
						CandidateId:  rf.me,
						LastLogTerm:  0,
						LastLogIndex: len(rf.logs) - 1,
					}

					if len(rf.logs) > 0 {
						voteArgs.LastLogTerm = rf.logs[len(rf.logs)-1].Term
					}

					voteReply := RequestVoteReply{}

					go rf.sendRequestVote(i, &voteArgs, &voteReply, &votedNums) //voteNums传递有没有更好的实现
				}

			case Leader:
				//心跳或者同步日志
				fmt.Printf("Raft[%v] : 我是领导\n", rf.me)
				appendNums := 1
				rf.timer.Reset(HeartbeatSleep * time.Millisecond)

				//构造msg
				for i := 0; i < len(rf.peers); i++ {
					if i == rf.me {
						continue
					}
					appendEntriesArgs := AppendEntriesArgs{
						Term:         rf.currentTerm,
						LeadId:       rf.me,
						PrevLogIndex: -1,
						PrevLogTerm:  -1,
						Entries:      nil,
						LeaderCommit: rf.commitIndex,
					}

					appendEntriesReply := AppendEntriesReply{}

					appendEntriesArgs.Entries = rf.logs[rf.nextIndex[i]:]
					appendEntriesArgs.PrevLogIndex = rf.nextIndex[i] - 1

					if appendEntriesArgs.PrevLogIndex != -1 {
						appendEntriesArgs.PrevLogTerm = rf.logs[appendEntriesArgs.PrevLogIndex].Term
					}

					go rf.sendAppendEntries(i, &appendEntriesArgs, &appendEntriesReply, &appendNums)
				}

			}

		}
		rf.mu.Unlock()
	}
}

//
// the service or tester wants to create a Raft server. the ports
// of all the Raft servers (including this one) are in peers[]. this
// server's port is peers[me]. all the servers' peers[] arrays
// have the same order. persister is a place for this server to
// save its persistent state, and also initially holds the most
// recent saved state, if any. applyCh is a channel on which the
// tester or service expects Raft to send ApplyMsg messages.
// Make() must return quickly, so it should start goroutines
// for any long-running work.
//
func Make(peers []*labrpc.ClientEnd, me int,
	persister *Persister, applyCh chan ApplyMsg) *Raft {
	rf := &Raft{}
	rf.peers = peers
	rf.persister = persister
	rf.me = me

	// Your initialization code here (2A, 2B, 2C).
	rf.applyChan = applyCh

	rf.currentTerm = 0
	rf.votedFor = -1
	rf.logs = make([]LogEntry, 0)

	rf.commitIndex = 0
	rf.lastApplied = 0

	rf.nextIndex = make([]int, len(peers))
	rf.matchIndex = make([]int, len(peers))

	rf.role = Follower
	rf.reElectionTimeout = time.Duration(generateOverTime(int64(rf.me))) * time.Millisecond
	rf.timer = time.NewTicker(rf.reElectionTimeout)

	// initialize from state persisted before a crash
	rf.readPersist(persister.ReadRaftState())
	fmt.Printf("恢复Raft[%v]\n", rf.me)

	// start ticker goroutine to start elections
	go rf.ticker()

	return rf
}




***********************************************************************************************************************

package raft

//
// this is an outline of the API that raft must expose to
// the service (or tester). see comments below for
// each of these functions for more details.
//
// rf = Make(...)
//   create a new Raft server.
// rf.Start(command interface{}) (index, term, isleader)
//   start agreement on a new log entry
// rf.GetState() (term, isLeader)
//   ask a Raft for its current term, and whether it thinks it is leader
// ApplyMsg
//   each time a new entry is committed to the log, each Raft peer
//   should send an ApplyMsg to the service (or tester)
//   in the same server.
//

import (
	"6.824/labgob"
	"bytes"
	"fmt"
	//	"bytes"
	"sync"
	"sync/atomic"
	"time"

	//	"6.824/labgob"
	"6.824/labrpc"
)

//
// as each Raft peer becomes aware that successive log entries are
// committed, the peer should send an ApplyMsg to the service (or
// tester) on the same server, via the applyCh passed to Make(). set
// CommandValid to true to indicate that the ApplyMsg contains a newly
// committed log entry.
//
// in part 2D you'll want to send other kinds of messages (e.g.,
// snapshots) on the applyCh, but set CommandValid to false for these
// other uses.
//

// Role 节点角色
type Role int

// VoteState 投票状态
type VoteState int

// AppendEntriesState  追加日志状态
type AppendEntriesState int

const ( //枚举节点角色
	Follower Role = iota
	Candidate
	Leader
)

const (

	// MoreVoteTime MinVoteTime 定义随机生成投票过期时间范围:(MoreVoteTime+MinVoteTime~MinVoteTime)
	MoreVoteTime = 100
	MinVoteTime  = 75

	// HeartbeatSleep 心脏休眠时间,要注意的是，这个时间要比选举低，才能建立稳定心跳机制
	HeartbeatSleep = 35
	AppliedSleep   = 15
)

type LogEntry struct {
	Term    int
	Command interface{}
}

type ApplyMsg struct {
	CommandValid bool
	Command      interface{}
	CommandIndex int

	// For 2D:
	SnapshotValid bool
	Snapshot      []byte
	SnapshotTerm  int
	SnapshotIndex int
}

type Raft struct {
	mu        sync.Mutex          // Lock to protect shared access to this peer's state
	peers     []*labrpc.ClientEnd // RPC end points of all peers
	persister *Persister          // Object to hold this peer's persisted state
	me        int                 // this peer's index into peers[]
	dead      int32               // set by Kill()

	// Your data here (2A, 2B, 2C).
	// Look at the paper's Figure 2 for a description of what
	// state a Raft server must maintain.

	//所有类型server拥有的变量
	currentTerm int        //当前任期
	votedFor    int        //记录当前节点的投票对象
	logs        []LogEntry //日志条目数组

	//所有server经常修改的
	commitIndex int //状态机中已经被提交的日志条目的索引值
	lastApplied int //最后一个被添加到状态机的索引值

	//leader拥有的变量
	nextIndex  []int //需要发送给follower下一个日志条目的索引值
	matchIndex []int //已经复制给follower的最后日志条目的下标

	role              Role //节点的角色
	reElectionTimeout time.Duration
	timer             *time.Ticker //每个节点的计时器

	applyChan chan ApplyMsg //写入channel
}

type AppendEntriesArgs struct {
	Term         int        //任期
	LeadId       int        //leader的ID
	PrevLogIndex int        //预计从哪里追加的index，初始化为rf.nextIndex[i] - 1
	PrevLogTerm  int        //追加日志的任期号
	Entries      []LogEntry //预计存储的日志
	LeaderCommit int        //最后一个被大多数机器都复制的日志的index

}

type AppendEntriesReply struct { //follower给leader的返回结构
	Term        int
	Success     bool
	UpNextIndex int //更新Leader的nextIndex[i]
}

type RequestVoteArgs struct {
	Term         int //候选人的任期
	CandidateId  int //候选人id
	LastLogIndex int //候选人日志最后索引
	LastLogTerm  int //候选人最后索引的任期号
}

type RequestVoteReply struct {
	// Your data here (2A).
	Term        int  //投票方的任期
	VoteGranted bool //是否投给该竞选者
}

func (rf *Raft) GetState() (int, bool) {
	rf.mu.Lock()
	defer rf.mu.Unlock()
	var term int
	var isleader bool
	// Your code here (2A).
	term = rf.currentTerm
	if rf.role == Leader {
		isleader = true
	} else {
		isleader = false
	}
	return term, isleader
}

func Make(peers []*labrpc.ClientEnd, me int,
	persister *Persister, applyCh chan ApplyMsg) *Raft {
	rf := &Raft{}
	rf.peers = peers
	rf.persister = persister
	rf.me = me

	// Your initialization code here (2A, 2B, 2C).
	rf.mu.Lock()

	rf.applyChan = applyCh

	rf.currentTerm = 0
	rf.votedFor = -1
	rf.logs = make([]LogEntry, 0)

	rf.commitIndex = 0
	rf.lastApplied = 0

	rf.nextIndex = make([]int, len(peers))
	rf.matchIndex = make([]int, len(peers))

	rf.role = Follower
	rf.reElectionTimeout = time.Duration(generateOverTime(int64(rf.me))) * time.Millisecond
	rf.timer = time.NewTicker(rf.reElectionTimeout)

	// initialize from state persisted before a crash
	rf.readPersist(persister.ReadRaftState())
	fmt.Printf("恢复Raft[%v]\n", rf.me)

	// start ticker goroutine to start elections
	go rf.ticker()

	return rf
}

func (rf *Raft) persist() {
	// Your code here (2C).
	// Example:
	w := new(bytes.Buffer)
	e := labgob.NewEncoder(w)
	e.Encode(rf.currentTerm)
	e.Encode(rf.votedFor)
	e.Encode(rf.logs)
	data := w.Bytes()
	rf.persister.SaveRaftState(data)
}

//
// restore previously persisted state.
//
func (rf *Raft) readPersist(data []byte) {
	if data == nil || len(data) < 1 { // bootstrap without any state?
		return
	}
	// Your code here (2C).
	// Example:
	r := bytes.NewBuffer(data)
	d := labgob.NewDecoder(r)
	var currentTerm int
	var voteFor int
	var logs []LogEntry

	if d.Decode(&currentTerm) != nil || d.Decode(&voteFor) != nil || d.Decode(&logs) != nil {
		fmt.Println("解码错误！")
	} else {
		rf.currentTerm = currentTerm
		rf.votedFor = voteFor
		rf.logs = logs
	}

}

//
// A service wants to switch to snapshot.  Only do so if Raft hasn't
// have more recent info since it communicate the snapshot on applyCh.
//
func (rf *Raft) CondInstallSnapshot(lastIncludedTerm int, lastIncludedIndex int, snapshot []byte) bool {

	// Your code here (2D).

	return true
}

// the service says it has created a snapshot that has
// all info up to and including index. this means the
// service no longer needs the log through (and including)
// that index. Raft should now trim its log as much as possible.
func (rf *Raft) Snapshot(index int, snapshot []byte) {
	// Your code here (2D).

}

//
// example RequestVote RPC handler.
//
func (rf *Raft) RequestVote(args *RequestVoteArgs, reply *RequestVoteReply) {
	// Your code here (2A, 2B).
	rf.mu.Lock()
	defer rf.mu.Unlock()
	if rf.killed() {
		reply.VoteState = Killed
		reply.Term = -1
		reply.VoteGranted = false
		return
	}

	//出现分区，该竞选者已经过时
	if args.Term < rf.currentTerm {
		//fmt.Printf("在任期 [%v] 的Raft要求在任期 [%v] 的Raft投票，但是这个请求是过期的。不予投票\n", args.Term, rf.currentTerm)
		reply.VoteState = Expire
		reply.Term = rf.currentTerm
		reply.VoteGranted = false
		return
	}

	if args.Term > rf.currentTerm {
		//重置状态
		rf.role = Follower
		rf.currentTerm = args.Term
		rf.votedFor = -1
		rf.persist()
		rf.persist()
	}

	if rf.votedFor == -1 {
		currentLogIndex := len(rf.logs) - 1
		currentLogTerm := 0
		//如果currentLogIndex的下标不是-1，将Term值赋值过来
		if currentLogIndex >= 0 {
			currentLogTerm = rf.logs[currentLogIndex].Term
		}

		//要求投票的leader的日志应该是最新的
		if args.LastLogTerm < currentLogTerm || ((len(rf.logs) > 0) && args.LastLogTerm == currentLogTerm && args.LastLogIndex < currentLogIndex) {
			//fmt.Printf("在任期 [%v] 的Raft要求在任期 [%v] 的Raft投票，但是这个日志不是最新的。不予投票\n", args.Term, rf.currentTerm)
			reply.VoteState = Expire
			reply.VoteGranted = false
			reply.Term = rf.currentTerm
			return
		}

		//投票
		fmt.Printf("Raft [%v]投票成功 -> %v\n", rf.me, args.CandidateId)
		rf.votedFor = args.CandidateId
		rf.persist()

		reply.VoteState = Normal
		reply.VoteGranted = true
		reply.Term = rf.currentTerm

		rf.timer.Reset(rf.reElectionTimeout)
	} else { //任期相同，但是票已经投给别人
		reply.VoteState = Voted
		reply.VoteGranted = false

		if rf.votedFor != args.CandidateId {
			return
		} else { //当前节点的票给同一个人，但由于网络原因又发送了一次请求
			rf.role = Follower
		}
		rf.timer.Reset(rf.reElectionTimeout)
	}
	return
}

//
// example code to send a RequestVote RPC to a server.
// server is the index of the target server in rf.peers[].
// expects RPC arguments in args.
// fills in *reply with RPC reply, so caller should
// pass &reply.
// the types of the args and reply passed to Call() must be
// the same as the types of the arguments declared in the
// handler function (including whether they are pointers).
//
// The labrpc package simulates a lossy network, in which servers
// may be unreachable, and in which requests and replies may be lost.
// Call() sends a request and waits for a reply. If a reply arrives
// within a timeout interval, Call() returns true; otherwise
// Call() returns false. Thus Call() may not return for a while.
// A false return can be caused by a dead server, a live server that
// can't be reached, a lost request, or a lost reply.
//
// Call() is guaranteed to return (perhaps after a delay) *except* if the
// handler function on the server side does not return.  Thus there
// is no need to implement your own timeouts around Call().
//
// look at the comments in ../labrpc/labrpc.go for more details.
//
// if you're having trouble getting RPC to work, check that you've
// capitalized all field names in structs passed over RPC, and
// that the caller passes the address of the reply struct with &, not
// the struct itself.
//
func (rf *Raft) sendRequestVote(server int, args *RequestVoteArgs, reply *RequestVoteReply, voteNums *int) bool {
	if rf.killed() {
		return false
	}
	//fmt.Println("I'm trying to get vote.")
	ok := rf.peers[server].Call("Raft.RequestVote", args, reply)

	for !ok {
		//fmt.Println("I'm trying to get vote.")
		if rf.killed() {
			return false
		}
		ok = rf.peers[server].Call("Raft.RequestVote", args, reply) //不停的进行重传
	}

	//fmt.Printf("Raft %v尝试获得锁", rf.me)
	rf.mu.Lock()
	//fmt.Printf("Raft %v获得锁", rf.me)
	defer rf.mu.Unlock()

	switch reply.VoteState {
	case Expire:
		{
			rf.role = Follower
			rf.timer.Reset(rf.reElectionTimeout)
			if reply.Term > rf.currentTerm {
				rf.currentTerm = reply.Term
				rf.votedFor = -1
				rf.persist()
			}
		}
	case Normal, Voted:
		{
			//收集选票

			if reply.VoteGranted && reply.Term == rf.currentTerm && *voteNums <= (len(rf.peers)/2) {
				*voteNums++
			}
			//fmt.Printf("%v\n", *voteNums)

			if *voteNums > (len(rf.peers) / 2) {
				*voteNums = 0
				if rf.role == Leader {
					return ok
				}
				fmt.Printf("Raft[%v] 成为领导者, 最后一个日志下标：%v, 已提交日志：%v\n", rf.me, len(rf.logs)-1, rf.commitIndex)
				rf.role = Leader
				rf.nextIndex = make([]int, len(rf.peers))
				for i, _ := range rf.nextIndex {
					rf.nextIndex[i] = len(rf.logs)
				}
				rf.timer.Reset(HeartbeatSleep * time.Millisecond)
			}

		}
	case Killed:
		return false

	}
	return ok
}

//
// the service using Raft (e.g. a k/v server) wants to start
// agreement on the next command to be appended to Raft's log. if this
// server isn't the leader, returns false. otherwise start the
// agreement and return immediately. there is no guarantee that this
// command will ever be committed to the Raft log, since the leader
// may fail or lose an election. even if the Raft instance has been killed,
// this function should return gracefully.
//
// the first return value is the index that the command will appear at
// if it's ever committed. the second return value is the current
// term. the third return value is true if this server believes it is
// the leader.
//
func (rf *Raft) sendAppendEntries(server int, args *AppendEntriesArgs, reply *AppendEntriesReply, appendNum *int) {

	if rf.killed() {
		return
	}
	fmt.Printf("Raft[%v] 尝试给Raft[%v]发送追加日志消息！\n", rf.me, server)
	ok := rf.peers[server].Call("Raft.AppendEntries", args, reply)

	for !ok {
		if rf.killed() {
			return
		}
		fmt.Printf("Raft[%v] 尝试给Raft[%v]发送追加日志消息！\n", rf.me, server)
		ok = rf.peers[server].Call("Raft.AppendEntries", args, reply) //不停的进行重传
	}

	rf.mu.Lock()
	defer rf.mu.Unlock()

	switch reply.AppState {
	case AppKilled:
		{
			fmt.Printf("Raft[%v]挂了\n", rf.me)
			return
		}
	//目标节点正常返回
	case AppNormal:
		{
			if reply.Success && reply.Term == rf.currentTerm && *appendNum <= len(rf.peers)/2 {
				*appendNum++
			}

			if rf.nextIndex[server] > len(rf.logs)+1 {
				return
			}

			rf.nextIndex[server] += len(args.Entries)
			if *appendNum > len(rf.peers)/2 {
				*appendNum = 0

				if len(rf.logs) == 0 || rf.logs[len(rf.logs)-1].Term != rf.currentTerm {
					return
				}

				for rf.lastApplied < len(rf.logs) {
					rf.lastApplied++
					fmt.Printf("主节点Raft[%v] 提交日志 %v\n", rf.me, rf.lastApplied-1)
					applyMsg := ApplyMsg{
						CommandValid: true,
						Command:      rf.logs[rf.lastApplied-1].Command,
						CommandIndex: rf.lastApplied,
					}
					rf.applyChan <- applyMsg
					rf.commitIndex = rf.lastApplied
				}

			}
			return
		}

	case AppOutOfDate: //网络出现分区，本Leader节点已经过时
		{
			//节点变为追随者，并重置rf的状态
			fmt.Printf("Raft[%v] 切换为跟随者！\n", rf.me)
			rf.role = Follower
			rf.votedFor = -1
			rf.timer.Reset(rf.reElectionTimeout)
			rf.currentTerm = reply.Term
			rf.persist()
		}
	case Mismatch, AppCommited:
		{
			if reply.Term > rf.currentTerm {
				rf.role = Follower
				rf.votedFor = -1
				rf.timer.Reset(rf.reElectionTimeout)
				rf.currentTerm = reply.Term
				rf.persist()
			}
			rf.nextIndex[server] = reply.UpNextIndex
			return
		}

	}
	return
}

func (rf *Raft) AppendEntries(args *AppendEntriesArgs, reply *AppendEntriesReply) {
	rf.mu.Lock()
	defer rf.mu.Unlock()
	rf.timer.Reset(rf.reElectionTimeout)
	if rf.killed() { //节点挂机
		reply.AppState = AppKilled
		reply.Term = -1
		reply.Success = false
		fmt.Printf("从节点Raft[%v]挂机\n", rf.me)
		return
	}

	//网络出现分区，请求leader的任期比当前raft任期小，说明请求leader已经过期
	if args.Term < rf.currentTerm {
		reply.AppState = AppOutOfDate
		reply.Term = rf.currentTerm
		reply.Success = false
		fmt.Printf("Raft[%v] 对 raft[%v]说：你不是leader了\n", rf.me, args.LeadId)
		return
	}

	// 出现冲突情况
	// 1. preLogIndex大于当前日志的最大下标，说明追随者缺失日志，不予更新
	// 2. preLog中的任期和preLogIndex处的任期不相等说明日志冲

	if args.PrevLogIndex >= 0 && (args.PrevLogIndex > len(rf.logs)-1 || args.PrevLogTerm != rf.logs[args.PrevLogIndex].Term) { //在相同的prevIndex处判断从节点和主节点的任期值
		reply.AppState = Mismatch
		reply.Term = rf.currentTerm
		reply.Success = false
		reply.UpNextIndex = rf.lastApplied
		//fmt.Printf("从节点 Raft[%v, %v] 的下一个日志是：%v\n", rf.me, rf.currentTerm, reply.UpNextIndex)
		return
	}

	//当前节点日志超前
	if args.PrevLogIndex != -1 && rf.lastApplied-1 > args.PrevLogIndex {
		reply.AppState = AppCommited
		reply.Term = rf.currentTerm
		reply.Success = false
		reply.UpNextIndex = rf.lastApplied //快进到已提交部分
		return
	}

	//对当前的ticker进行重置
	//fmt.Printf("重置从节点Raft[%v]\n", rf.me)
	rf.currentTerm = args.Term
	rf.votedFor = args.LeadId
	rf.role = Follower

	//对reply进行赋值
	reply.AppState = AppNormal
	reply.Term = rf.currentTerm
	reply.Success = true

	//如果是日志包，则进行追加
	if args.Entries != nil {
		fmt.Printf("从节点Raft [%v] 追加日志 %v - %v\n", rf.me, args.PrevLogIndex+1, args.PrevLogIndex+len(args.Entries))
		rf.logs = rf.logs[:args.PrevLogIndex+1]
		rf.logs = append(rf.logs, args.Entries...)
		fmt.Printf("从节点日志：")
		for i, v := range rf.logs {
			fmt.Printf("[%v, %v], ", v.Term, i)
			if i%20 == 0 && i != 0 {
				fmt.Println()
			}
		}
		fmt.Println()

	}
	rf.persist()

	//将日志提交至与leader相同
	for rf.lastApplied < args.LeaderCommit {
		rf.lastApplied++
		fmt.Printf("从节点Raft[%v] 提交日志 %v\n", rf.me, rf.lastApplied-1)
		applyMsg := ApplyMsg{
			CommandValid: true,
			CommandIndex: rf.lastApplied,
			Command:      rf.logs[rf.lastApplied-1].Command,
		}
		rf.applyChan <- applyMsg
		rf.commitIndex = rf.lastApplied
	}

	return
}

func (rf *Raft) Start(command interface{}) (int, int, bool) {
	index := -1
	term := -1
	isLeader := true

	// Your code here (2B).
	if rf.killed() {
		return index, term, false
	}

	rf.mu.Lock()
	defer rf.mu.Unlock()

	if rf.role != Leader {
		return index, term, false
	}

	isLeader = true
	//初始化日志条目并进行追加
	appendLog := LogEntry{
		Term:    rf.currentTerm,
		Command: command,
	}
	fmt.Printf("主节点 Raft[%v] 追加日志 %v - %v\n", rf.me, len(rf.logs), len(rf.logs))
	rf.logs = append(rf.logs, appendLog) //主节点追加日志
	fmt.Printf("主节点日志：")
	for i, v := range rf.logs {
		fmt.Printf("[%v, %v], ", v.Term, i)
		if i%20 == 0 && i != 0 {
			fmt.Println()
		}
	}
	fmt.Println()
	rf.persist()

	index = len(rf.logs)
	term = rf.currentTerm
	return index, term, isLeader
}

//
// the tester doesn't halt goroutines created by Raft after each test,
// but it does call the Kill() method. your code can use killed() to
// check whether Kill() has been called. the use of atomic avoids the
// need for a lock.
//
// the issue is that long-running goroutines use memory and may chew
// up CPU time, perhaps causing later tests to fail and generating
// confusing debug output. any goroutine with a long-running loop
// should call killed() to check whether it should stop.
//
func (rf *Raft) Kill() {
	atomic.StoreInt32(&rf.dead, 1)
	// Your code here, if desired.
	rf.mu.Lock()
	rf.timer.Stop()
	rf.mu.Unlock()
}

func (rf *Raft) killed() bool {
	z := atomic.LoadInt32(&rf.dead)
	return z == 1
}

// The ticker go routine starts a new election if this peer hasn't received
// heartsbeats recently.
func (rf *Raft) ticker() {
	for rf.killed() == false {

		// Your code here to check if a leader election should
		// be started and to randomize sleeping time using
		// time.Sleep().

		select { //定时器超时进行选举
		case <-rf.timer.C:
			if rf.killed() {
				return
			}

			rf.mu.Lock()
			switch rf.role {
			case Follower:
				rf.role = Candidate
				fallthrough
			case Candidate:
				fmt.Printf("Raft[%v] 成为候选者。\n", rf.me)
				//初始化自己的任期，并把票投给自己
				rf.currentTerm += 1
				rf.votedFor = rf.me
				votedNums := 1 //票数统计
				rf.persist()

				//重新设置选举超时
				rf.reElectionTimeout = time.Duration(generateOverTime(int64(rf.me))) * time.Millisecond
				rf.timer.Reset(rf.reElectionTimeout)

				//请求其他节点选举

				for i := 0; i < len(rf.peers); i++ {
					if i == rf.me {
						continue
					}

					voteArgs := RequestVoteArgs{
						Term:         rf.currentTerm,
						CandidateId:  rf.me,
						LastLogTerm:  0,
						LastLogIndex: len(rf.logs) - 1,
					}

					if len(rf.logs) > 0 {
						voteArgs.LastLogTerm = rf.logs[len(rf.logs)-1].Term
					}

					voteReply := RequestVoteReply{}

					go rf.sendRequestVote(i, &voteArgs, &voteReply, &votedNums) //voteNums传递有没有更好的实现
				}

			case Leader:
				//心跳或者同步日志
				fmt.Printf("Raft[%v] : 我是领导\n", rf.me)
				appendNums := 1
				rf.timer.Reset(HeartbeatSleep * time.Millisecond)

				//构造msg
				for i := 0; i < len(rf.peers); i++ {
					if i == rf.me {
						continue
					}
					appendEntriesArgs := AppendEntriesArgs{
						Term:         rf.currentTerm,
						LeadId:       rf.me,
						PrevLogIndex: -1,
						PrevLogTerm:  -1,
						Entries:      nil,
						LeaderCommit: rf.commitIndex,
					}

					appendEntriesReply := AppendEntriesReply{}

					appendEntriesArgs.Entries = rf.logs[rf.nextIndex[i]:]
					appendEntriesArgs.PrevLogIndex = rf.nextIndex[i] - 1

					if appendEntriesArgs.PrevLogIndex != -1 {
						appendEntriesArgs.PrevLogTerm = rf.logs[appendEntriesArgs.PrevLogIndex].Term
					}

					go rf.sendAppendEntries(i, &appendEntriesArgs, &appendEntriesReply, &appendNums)
				}

			}

		}
		rf.mu.Unlock()
	}
}


// ------------------------------------------- 日志快照部分 --------------------------------------------------------------

func (rf *Raft) leaderSendSnapShot(server int) {
	rf.mu.Lock()

	args := InstallSnapShotArgs{
		Term:             rf.currentTerm,
		LeaderId:         rf.me,
		LastIncludeIndex: rf.lastIncludeTerm,
		LastIncludeTerm:  rf.lastIncludeTerm,
		Data:             rf.persister.ReadSnapshot(),
	}

	reply := InstallSnapShotReply{}

	rf.mu.Unlock()

	re := rf.sendSnapShot(server, &args, &reply)

	if re == true {
		rf.mu.Lock()
		if rf.role != Leader || rf.currentTerm != args.Term {
			rf.mu.Unlock()
			return
		}

		// 如果返回的Term大于自身Term，说明自身数据已经不适合了
		if reply.Term > rf.currentTerm {
			rf.role = Follower
			rf.votedFor = -1
			rf.votedNum = 0
			rf.persist()
			rf.voteTimer = time.Now()
			rf.mu.Unlock()
			return
		}

		rf.matchIndex[server] = args.LastIncludeIndex
		rf.nextIndex[server] = args.LastIncludeIndex + 1

		rf.mu.Unlock()
		return
	}
}

func (rf *Raft) InstallSnapShot(args *InstallSnapShotArgs, reply *InstallSnapShotReply) {
	rf.mu.Lock()
	if rf.currentTerm > args.Term {
		reply.Term = rf.currentTerm
		rf.mu.Unlock()
		return
	}

	rf.currentTerm = args.Term
	reply.Term = args.Term

	rf.role = Follower
	rf.votedFor = -1
	rf.votedNum = 0
	rf.persist()
	rf.voteTimer = time.Now()

	if rf.lastIncludeIndex >= args.LastIncludeIndex {
		rf.mu.Unlock()
		return
	}

	// 将快照前的直接apply
	index := args.LastIncludeIndex
	tempLog := make([]LogEntry, 0)
	tempLog = append(tempLog, LogEntry{})

	// 将当前节点位于快照后的log记录
	for i := index + 1; i <= rf.getLastIndex(); i++ {
		tempLog = append(tempLog, rf.restoreLog(i))
	}

	rf.lastIncludeIndex = args.LastIncludeTerm
	rf.lastIncludeTerm = args.LastIncludeIndex

	rf.logs = tempLog
	if index > rf.commitIndex {
		rf.commitIndex = index
	}

	if index > rf.lastApplied {
		rf.lastApplied = index
	}
	//DPrintf("Raft[%d, %d] 接收快照.....................................................\n", rf.me, rf.currentTerm)
	rf.persister.SaveStateAndSnapshot(rf.persistData(), args.Data)

	msg := ApplyMsg{
		SnapshotValid: true,
		Snapshot:      args.Data,
		SnapshotTerm:  rf.lastIncludeTerm,
		SnapshotIndex: rf.lastIncludeIndex,
	}

	rf.mu.Unlock()
	rf.applyChan <- msg

}

// index是快照应用的index， snapshot代表的是上层service传来的快照字节流，
func (rf *Raft) SnapShot(index int, snapshot []byte) {
	if rf.killed() {
		return
	}
	//DPrintf("--------------------------------------执行快照--------------------------------------------------")

	rf.mu.Lock()
	defer rf.mu.Unlock()

	// 如果下标大于自身的提交，说明没被提交不能安装快照，如果自身快照点大于index说明不需要安装
	if rf.lastIncludeIndex >= index || index > rf.commitIndex {
		return
	}

	//更新快照日志
	sLogs := make([]LogEntry, 0)
	sLogs = append(sLogs, LogEntry{})

	for i := index + 1; i <= rf.getLastIndex(); i++ {
		sLogs = append(sLogs, rf.restoreLog(i))
	}

	//更新快照下标/term
	if index == rf.getLastIndex()+1 { // +1是因为前面有一个空日志
		rf.lastIncludeTerm = rf.getLastTerm()
	} else {
		rf.lastIncludeTerm = rf.restoreLogTerm(index)
	}

	rf.lastIncludeIndex = index
	rf.logs = sLogs

	// apply了快照就应该重置commitIndex、lastApplied
	if index > rf.commitIndex {
		rf.commitIndex = index
	}

	if index > rf.lastApplied {
		rf.lastApplied = index
	}

	// 持久化快照信息
	//DPrintf("Raft[%d, %d]创建快照......................................................\n", rf.me, rf.currentTerm)
	rf.persister.SaveStateAndSnapshot(rf.persistData(), snapshot)

}

// --------------------------------------- 日志持久化部分 ----------------------------------------------------------------
func (rf *Raft) persistData() []byte {
	// Your code here (2C).
	// Example:
	w := new(bytes.Buffer)
	e := labgob.NewEncoder(w)
	e.Encode(rf.currentTerm)
	e.Encode(rf.votedFor)
	e.Encode(rf.logs)
	e.Encode(rf.lastIncludeIndex)
	e.Encode(rf.lastIncludeTerm)
	data := w.Bytes()
	//fmt.Printf("RaftNode[%d] persist starts, currentTerm[%d] voteFor[%d] log[%v]\n", rf.me, rf.currentTerm, rf.votedFor, rf.logs)
	return data
}

func (rf *Raft) persist() {
	// Your code here (2C).
	// Example:
	data := rf.persistData()
	rf.persister.SaveRaftState(data)
}

//
// restore previously persisted state.
//
func (rf *Raft) readPersist(data []byte) {
	if data == nil || len(data) < 1 { // bootstrap without any status?
		return
	}
	// Your code here (2C).
	// Example:
	r := bytes.NewBuffer(data)
	d := labgob.NewDecoder(r)
	var currentTerm int
	var votedFor int
	var logs []LogEntry
	var lastIncludeIndex int
	var lastIncludeTerm int
	if d.Decode(&currentTerm) != nil ||
		d.Decode(&votedFor) != nil ||
		d.Decode(&logs) != nil ||
		d.Decode(&lastIncludeIndex) != nil ||
		d.Decode(&lastIncludeTerm) != nil {
		fmt.Println("decode error")
	} else {
		rf.currentTerm = currentTerm
		rf.votedFor = votedFor
		rf.logs = logs
		rf.lastIncludeIndex = lastIncludeIndex
		rf.lastIncludeTerm = lastIncludeTerm
	}

}

func (rf *Raft) CondInstallSnapshot(lastIncludedTerm int, lastIncludedIndex int, snapshot []byte) bool {

	// Your code here (2D).

	return true
}

/**
上层服务调用Raft协议接口，追加日志
*/
func (rf *Raft) Start(command interface{}) (int, int, bool) {
	rf.mu.Lock()
	defer rf.mu.Unlock()

	if rf.killed() == true {
		return -1, -1, false
	}

	if rf.role != Leader {
		return -1, -1, false
	} else {
		index := rf.getLastIndex() + 1
		term := rf.currentTerm
		//DPrintf("主节点[%d, %d]添加日志\n", rf.me, rf.currentTerm)
		rf.logs = append(rf.logs, LogEntry{term, command})
		//rf.DPrintLogs()

		rf.persist()
		return index, term, true
	}
}

func (rf *Raft) killed() bool {
	z := atomic.LoadInt32(&rf.dead)
	return z == 1
}
func (rf *Raft) Kill() {
	atomic.StoreInt32(&rf.dead, 1)

}



//----------------------------------------------日志压缩(快照）部分---------------------------------------------------------
func (rf *Raft) leaderSendSnapShot(server int) {

	rf.mu.Lock()

	args := InstallSnapShotArgs{
		rf.currentTerm,
		rf.me,
		rf.lastIncludeIndex,
		rf.lastIncludeTerm,
		rf.persister.ReadSnapshot(),
	}
	reply := InstallSnapShotReply{}

	rf.mu.Unlock()

	res := rf.sendSnapShot(server, &args, &reply)

	if res == true {
		rf.mu.Lock()
		if rf.role != Leader || rf.currentTerm != args.Term {
			rf.mu.Unlock()
			return
		}

		// 如果返回的term比自己大说明自身数据已经不合适了
		if reply.Term > rf.currentTerm {
			rf.role = Follower
			rf.votedFor = -1
			rf.votedNum = 0
			rf.persist()
			rf.voteTimer = time.Now()
			rf.mu.Unlock()
			return
		}

		rf.matchIndex[server] = args.LastIncludeIndex
		rf.nextIndex[server] = args.LastIncludeIndex + 1

		rf.mu.Unlock()
		return
	}
}

// InstallSnapShot RPC Handler
func (rf *Raft) InstallSnapShot(args *InstallSnapShotArgs, reply *InstallSnapShotReply) {
	rf.mu.Lock()
	if rf.currentTerm > args.Term {
		reply.Term = rf.currentTerm
		rf.mu.Unlock()
		return
	}

	rf.currentTerm = args.Term
	reply.Term = args.Term

	rf.role = Follower
	rf.votedFor = -1
	rf.votedNum = 0
	rf.persist()
	rf.voteTimer = time.Now()

	if rf.lastIncludeIndex >= args.LastIncludeIndex {
		rf.mu.Unlock()
		return
	}

	// 将快照后的logs切割，快照前的直接applied
	index := args.LastIncludeIndex
	tempLog := make([]LogEntry, 0)
	tempLog = append(tempLog, LogEntry{})

	for i := index + 1; i <= rf.getLastIndex(); i++ {
		tempLog = append(tempLog, rf.restoreLog(i))
	}

	rf.lastIncludeTerm = args.LastIncludeTerm
	rf.lastIncludeIndex = args.LastIncludeIndex

	rf.logs = tempLog
	if index > rf.commitIndex {
		rf.commitIndex = index
	}
	if index > rf.lastApplied {
		rf.lastApplied = index
	}
	rf.persister.SaveStateAndSnapshot(rf.persistData(), args.Data)

	msg := ApplyMsg{
		SnapshotValid: true,
		Snapshot:      args.Data,
		SnapshotTerm:  rf.lastIncludeTerm,
		SnapshotIndex: rf.lastIncludeIndex,
	}
	rf.mu.Unlock()

	rf.applyChan <- msg

}

// Snapshot the service says it has created a snapshot that has
// all info up to and including index. this means the
// service no longer needs the log through (and including)
// that index. Raft should now trim its log as much as possible.
// index代表是快照apply应用的index,而snapshot代表的是上层service传来的快照字节流，包括了Index之前的数据
// 这个函数的目的是把安装到快照里的日志抛弃，并安装快照数据，同时更新快照下标，属于peers自身主动更新，与leader发送快照不冲突
func (rf *Raft) SnapShot(index int, snapshot []byte) {
	// Your code here (2D).
	if rf.killed() {
		return
	}

	rf.mu.Lock()
	defer rf.mu.Unlock()
	// 如果下标大于自身的提交，说明没被提交不能安装快照，如果自身快照点大于index说明不需要安装
	//fmt.Println("[Snapshot] commintIndex", rf.commitIndex)
	if rf.lastIncludeIndex >= index || index > rf.commitIndex {
		return
	}
	// 更新快照日志
	sLogs := make([]LogEntry, 0)
	sLogs = append(sLogs, LogEntry{})
	for i := index + 1; i <= rf.getLastIndex(); i++ {
		sLogs = append(sLogs, rf.restoreLog(i))
	}

	//fmt.Printf("[Snapshot-Rf(%v)]rf.commitIndex:%v,index:%v\n", rf.me, rf.commitIndex, index)
	// 更新快照下标/任期
	if index == rf.getLastIndex()+1 {
		rf.lastIncludeTerm = rf.getLastTerm()
	} else {
		rf.lastIncludeTerm = rf.restoreLogTerm(index)
	}

	rf.lastIncludeIndex = index
	rf.logs = sLogs

	// apply了快照就应该重置commitIndex、lastApplied
	if index > rf.commitIndex {
		rf.commitIndex = index
	}
	if index > rf.lastApplied {
		rf.lastApplied = index
	}

	// 持久化快照信息
	rf.persister.SaveStateAndSnapshot(rf.persistData(), snapshot)
}

// CondInstallSnapshot
// A service wants to switch to snapshot.  Only do so if Raft hasn't
// have more recent info since it communicate the snapshot on applyChan.
//
func (rf *Raft) CondInstallSnapshot(lastIncludedTerm int, lastIncludedIndex int, snapshot []byte) bool {

	// Your code here (2D).

	return true
}

//----------------------------------------------持久化（persist)部分---------------------------------------------------------
//
// save Raft's persistent status to stable storage,
// where it can later be retrieved after a crash and restart.
// see paper's Figure 2 for a description of what should be persistent.
//
func (rf *Raft) persistData() []byte {
	// Your code here (2C).
	// Example:
	w := new(bytes.Buffer)
	e := labgob.NewEncoder(w)
	e.Encode(rf.currentTerm)
	e.Encode(rf.votedFor)
	e.Encode(rf.logs)
	e.Encode(rf.lastIncludeIndex)
	e.Encode(rf.lastIncludeTerm)
	data := w.Bytes()
	//fmt.Printf("RaftNode[%d] persist starts, currentTerm[%d] voteFor[%d] log[%v]\n", rf.me, rf.currentTerm, rf.votedFor, rf.logs)
	return data
}

func (rf *Raft) persist() {
	data := rf.persistData()
	rf.persister.SaveRaftState(data)
}

//
// restore previously persisted status.
//
func (rf *Raft) readPersist(data []byte) {
	if data == nil || len(data) < 1 { // bootstrap without any status?
		return
	}
	// Your code here (2C).
	// Example:
	r := bytes.NewBuffer(data)
	d := labgob.NewDecoder(r)
	var currentTerm int
	var votedFor int
	var logs []LogEntry
	var lastIncludeIndex int
	var lastIncludeTerm int
	if d.Decode(&currentTerm) != nil ||
		d.Decode(&votedFor) != nil ||
		d.Decode(&logs) != nil ||
		d.Decode(&lastIncludeIndex) != nil ||
		d.Decode(&lastIncludeTerm) != nil {
		fmt.Println("decode error")
	} else {
		rf.currentTerm = currentTerm
		rf.votedFor = votedFor
		rf.logs = logs
		rf.lastIncludeIndex = lastIncludeIndex
		rf.lastIncludeTerm = lastIncludeTerm
	}
}

// GetState return currentTerm and whether this server
// believes it is the leader.

// Start
// the service using Raft (e.g. a k/v server) wants to start
// agreement on the next command to be appended to Raft's logs. if this
// server isn't the leader, returns false. otherwise start the
// agreement and return immediately. there is no guarantee that this
// command will ever be committed to the Raft logs, since the leader
// may fail or lose an election. even if the Raft instance has been killed,
// this function should return gracefully.
//
// the first return value is the index that the command will appear at
// if it's ever committed. the second return value is the current
// term. the third return value is true if this server believes it is
// the leader.
//
func (rf *Raft) Start(command interface{}) (int, int, bool) {

	// Your code here (2B).
	rf.mu.Lock()
	defer rf.mu.Unlock()
	if rf.killed() == true {
		return -1, -1, false
	}
	if rf.role != Leader {
		return -1, -1, false
	} else {
		index := rf.getLastIndex() + 1
		term := rf.currentTerm
		rf.logs = append(rf.logs, LogEntry{Term: term, Command: command})
		rf.persist()
		return index, term, true
	}
}

//
// the tester doesn't halt goroutines created by Raft after each test,
// but it does call the Kill() method. your code can use killed() to
// check whether Kill() has been called. the use of atomic avoids the
// need for a lock.
//
// the issue is that long-running goroutines use memory and may chew
// up CPU time, perhaps causing later tests to fail and generating
// confusing debug output. any goroutine with a long-running loop
// should call killed() to check whether it should stop.
//
func (rf *Raft) Kill() {
	atomic.StoreInt32(&rf.dead, 1)
	// Your code here, if desired.
}

func (rf *Raft) killed() bool {
	z := atomic.LoadInt32(&rf.dead)
	return z == 1
}
